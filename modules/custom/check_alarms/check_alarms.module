<?php
/**
 * @file
 * A module that provides the ability to check user alarms.
 */

/* The hook used to add cron functionality to the check_alarms module */
function check_alarms_cronapi($op, $job = NULL) {
    $items['Send out alarms'] = array(
        'description' => 'Check for and send alarms',
        'rule'        => '* * * * *', // every minute,
        'callback'    => 'check_alarms',
    );

    $items['Update Alarms'] = array(
        'description' => 'Checks for new alarms to be added next week',
        'rule'        => '0 0 * * *', // Once a day at midnight
        'callback'    => 'update_alarms',
    );

 $items['Delete Old Alarms'] = array(
        'description' => 'Checks for alarms sent over a week ago, delete them.',
        'rule'        => '0 0 * * *', // Once a day at midnight
        'callback'    => 'delete_old_alarms',
    );
 

    return $items;
}

/**
 * Implements hook_help.
 *
 * Displays help and module information.
 *
 * @param path
 *   Which path of the site we're using to display help
 * @param arg
 *   Array that holds the current path as returned from arg() function
 */
function check_alarms_help($path, $arg)
{
    switch ($path)
    {
        case "admin/help#check_alarms":
            return '<p>'
                 . t('Provides the ability to check user alarms.') . '</p>';
            break;
    }
}

/**
 * Implements hook_menu().
 *
 * Makes it appear in the navigation menu.
 */
function check_alarms_menu()
{
    $items['check_alarms'] = array(

        // 'title' and 'description' attributes are automatically translated;
        // don't put t() on those string literals.
        'title' => 'Check user alarms',
        'description' => 'Check user alarms',

        // What to call when the link is requested.
        'page callback' => 'drupal_get_form',

        // Values passed to the 'page callback' function
        // (in this case, drupal_get_form())
        // 'check_alarms_form' will be the form ID and the name of the
        // function that will create the settings form.
        'page arguments' => array('check_alarms_form'),

        // Access callback: TRUE if user can access.
        'access callback' => TRUE,
    );

    $items['update_alarms'] = array(

        'title' => 'update alarms.',
        'description' => 'Create alarms for the next week based on
                          alarm settings.',
        'page callback' => 'drupal_get_form',
        'page arguments' => array('update_alarms_form'),
        'access callback' => TRUE,
    );

    return $items;
}

/**
 * Implements hook_forms().
 *
 * This generates the form for checking for and sending pending alarms.
 */
function check_alarms_form($form, &$form_state)
{
    // Submit button.
    $form['submit'] = array(
        '#type' => 'submit',
        '#value' => t('Check alarms'),
    );

    return $form;
}

/**
 * Implements hook_forms().
 *
 * This generates the form needed to update alarms from alarm settings.
 */
function update_alarms_form($form, &$form_state)
{
    // Submit button.
    $form['submit'] = array(
        '#type' => 'submit',
        '#value' => t('Update alarms'),
    );

    return $form;
}

/**
 * Implements hook_form_submit().
 *
 * This is linked to hook_forms(), and is automatically called once the "Check
 * alarms" button is clicked.
 * This will send a text to the current user, if the button was clicked at the
 * time 
 */
function check_alarms_form_submit($form, &$form_state)
{
    // Just call the check_alarms function
    check_alarms();
}

/**
 * Implements hook_form_submit().
 *
 * This is linked to hook_forms(), and is automatically called once the "update
 * alarms" button is clicked.
 * This function will add Any new alarms from next week.
 */
function update_alarms_form_submit($form, &$form_state)
{
    // Just call the check_alarms function
    update_alarms();
}

/* Checks all alarms to see if any are pending. If any are, they are sent to
 * the author of the alarm.
 */
function check_alarms() {
    // Get the nids of the alarms that users have set.
    // (can't view the fields just by using db_select; must get nids, then call
    // node_load() on the nids)
    $query = db_select('node', 'al')
        ->fields('al', array('uid', 'nid'))
        ->condition('type', 'alarm') // Must be an alarm content type.
        ->execute();

    // For each nid found, record their times.
    foreach ($query as $a_row)
    {
        // Load the Alarm node from the query row.
        $a_node = node_load($a_row->nid);

        // Skip this alarm if it has already been sent.
        $sent_lang = field_language('node', $a_node, 'field_sent');
        if ($a_node->field_sent[$sent_lang][0]['value']) continue;

        // Get the taxonomies that define what card they want
        $sent_lang = field_language('node', $a_node, 'field_question_difficulty');
        $card_difficulty = $a_node->field_question_difficulty[$sent_lang][0]['tid'];

        $sent_lang = field_language('node', $a_node, 'field_question_subject');
        $card_subject = $a_node->field_question_subject[$sent_lang][0]['tid'];

        // Use field_get_items() to get the field_time field.
        // A difference here is that the 
        // The return value of field_get_items() is still an array, but its
        // sole element is another array that contains the time, time zone, and 
        // the database time zone.
        $alarm_date_outer = field_get_items('node', $a_node, 'field_time');

        // $alarm_date['value'] is in the format YYYY-MM-DD HH:MM:SS. The date
        // itself is converted to UTC, regardless of 
        // $alarm_date['timezone'] and $alarm_date['timezone_db'] specify a time
        // zone string, in a format compatible with PHP's DateTimeZone class.
        $alarm_date = $alarm_date_outer[0];

        // Use PHP's date_create() function to create a DateTime object.
        // $alarm_date['timezone_db'], whose value is always 'UTC', will tell
        // date_create() to consider the raw date and time in
        // $alarm_date['value'](w/o time zone) as being UTC.
        // $alarm_date['value'] and $local_date->date currently contain the same
        // value.
        $local_date = date_create(
                      $alarm_date['value'] . ' ' . $alarm_date['timezone_db']);

        // Use PHP's date_timezone_set() function to convert $local_date into
        // the user's local time zone.
        // $local_date->date and $alarm_date['value'] now contain different
        // values if and only if the current user is not in UTC area.
        $u_query = db_select('users', 'u')
            ->fields('u', array('timezone'))
            ->condition('uid', $a_row->uid)
            ->execute();

        // Only 1 timezone per user, so it should be fine to use fetchAssoc()
        // on the query (which only returns a single row as a 1-element
        // array, key being 'timezone' and value being the timezone string) 
        $u_array = $u_query->fetchAssoc('timezone');
        $u_tz = $u_array['timezone'];

        $local_date = date_timezone_set($local_date, timezone_open($u_tz));

        // strtotime() (a PHP function) converts a date/time string into a
        // timestamp format, but assumes that the passed-in string is in the
        // site's local time zone.
        // For example, a Toronto-based time string (without specifying time
        // zone), would be converted to a timestamp, but 5 hours ahead of
        // the original time string (b/c Toronto time is 5 hours behind UTC)
        // $local_date->date is accessed w/ date_format().
        $timestamp_alarm = strtotime(date_format($local_date, 'Y-m-d H:i:s'));
        drupal_set_message(t('Alarm timestamp (UTC): %alarm',
                    array('%alarm' => print_r($timestamp_alarm, TRUE))));

        // time() gets a timestamp corresponding to the current time.
        // It's always UTC.
        $timestamp_now = time();
        drupal_set_message(t('Request timestamp (UTC): %tnow',
                             array('%tnow' => $timestamp_now)));

        // Compare $timestamp_now and $timestamp_alarm.
        // Don't send a text if the alarm time isn't within 5 minutes of now.
        if (abs($timestamp_now - $timestamp_alarm) > 60 * 5)
            continue;
       
        // Get the user's cell number.
        $t_query = db_select('twilio_user', 'u')
            ->fields('u', array('number'))
            ->condition('uid', $a_row->uid)
            ->execute();

        $t_array = $t_query->fetchAssoc('number');
        $number = $t_array['number'];

        // No number? Skip.
        if ($number == NULL)
            continue;

        // Fetch a random question
        $card_query = new EntityFieldQuery;
        $cards = $card_query
            ->entityCondition('entity_type', 'node', '=')
            ->entityCondition('bundle', 'flashcard', '=')
            ->propertyCondition('status', NODE_PUBLISHED, '=')
            ->fieldCondition('field_difficulty', 'tid', $card_difficulty, '=')
            ->fieldCondition('field_subject', 'tid', $card_subject, '=')
            ->execute();

        $nid = array_rand($cards['node']);
        $flashcard = node_load($nid);
        $text = $flashcard->field_question;

        // Send the text.
        twilio_send($number, $text);

        // Set the field_sent flag on the alarm so that we don't send multiple
        // copies of the same node
        $a_node->field_sent[$sent_lang][0]['value'] = 1;
	$a_node->field_card_sent['und'][0]['target_id'] = $nid;
        node_save($a_node);
    }
}

/*
 * Implements hook_node_presave()
 * This function creates the next week's worth of alarms for a newly made
 * alarm settings type.
 */
function check_alarms_node_presave($node) {
    if (($node->type != 'alarm_setting') || $node->is_new != TRUE) {
        return;
    }

    // Get the current date and time as a DateTime object. This object tracks
    // all of the annoying stuff like time zones, and makes it easy to add
    // time intervals to a date.
    $current_time = new DateTime;

    // Get the numeric representation of the day of the week (0=sun, 6=sat)
    $current_day_of_week = intval(($current_time->format('w')));
    
    // get the array for the time field of the alarm setting.
    $set_time_lang = field_language('node', $node, 'field_set_time');
    $set_time = $node->field_set_time[$set_time_lang][0];

    // Get the hour and minute of the alarm
    $hour = $set_time['value'] / 3600;
    $minute = ($set_time['value'] % 3600) / 60;
    
    // load the user into an object
    $user = user_load($node->uid); 

    // Get the days on which the alarm repeats 
    if($set_time['sun'] == '1') $repeats[] = 0;
    if($set_time['mon'] == '1') $repeats[] = 1;
    if($set_time['tue'] == '1') $repeats[] = 2;
    if($set_time['wed'] == '1') $repeats[] = 3;
    if($set_time['thu'] == '1') $repeats[] = 4;
    if($set_time['fri'] == '1') $repeats[] = 5;
    if($set_time['sat'] == '1') $repeats[] = 6;

    // Now add the alarm for next week corresponding to these days
    foreach($repeats as $repeat_day_of_week) {
        // Find the number of days between the repeat occurence and the
        // current day of the week
        $day_difference = $repeat_day_of_week - $current_day_of_week;

        // Adjust for the case where the repeat day of the week has already
        // passed in the current week
        if ($day_difference < 0) {
            $day_difference += 7;
        }

        // Add this day difference to next week's date
        $repeat_date = clone $current_time;
        $repeat_date->add(new Dateinterval('P' . $day_difference . 'D'));
        
        // Set the timezone
        $repeat_date->setTimezone(new DateTimeZone($user->timezone));

        // Set the time of the alarm
        $repeat_date->setTime($hour, $minute);

        // Convert to GMT by adding back the offset.
        $offset = $repeat_date->getOffset();
        if($offset >= 0) {
            $repeat_date->sub(new Dateinterval('PT' . $offset . 'S'));
        }
        else {
            $offset = -$offset;
            $repeat_date->add(new Dateinterval('PT' . $offset . 'S'));
        }

        // Get the string representing the date, in the format Drupal likes
        $time_string = $repeat_date->format('Y-m-d H:i:00');

        // Now create the actual alarm node
        $new_alarm = new stdClass();
        $new_alarm->type = 'alarm';
        node_object_prepare($new_alarm);
        
        // Add in all the relevant fields
        $new_alarm->field_occasion = $node->field_set_occasion;
        $new_alarm->field_question_subject = $node->field_set_subject;
        $new_alarm->field_question_difficulty = $node->field_set_difficulty;
        $new_alarm->field_time['und'][0] = array(
            'value' => $time_string,
            'timezone' => $user->timezone,
            'timezone_db' => 'UTC',
            'date_type' => 'datetime',
        );
        $new_alarm->field_sent['und'][0]['value'] = '0';
        $new_alarm->field_answered['und'][0]['value'] = '0';
        $new_alarm->name = $node->name;
        $new_alarm->uid = $node->uid;
        $new_alarm->language = $node->language;
        $new_alarm->status = '1';
        node_submit($new_alarm);
        node_save($new_alarm);
        $node->field_associated_alarms['und'][] = array(
            'target_id' => $new_alarm->nid
        );
    }//INNER FOREACH

    return $node;    
}

/*
 * update_alarms() adds all alarms that apply to the day one week from now.
 */
function update_alarms() {
    // Get an array of all of the enabled alarm schedules.
    $alarm_setting_query = new EntityFieldQuery;
    $alarm_settings = $alarm_setting_query
        ->entityCondition('entity_type', 'node', '=')
        ->entityCondition('bundle', 'alarm_setting', '=')
        ->propertyCondition('status', NODE_PUBLISHED, '=')
        ->fieldCondition('field_enabled', 'value', 1, '=')
        ->fieldCondition('field_repeats', 'value', 1, '=')
        ->execute();

    // Get the current date and time as a DateTime object. This object tracks
    // all of the annoying stuff like time zones, and makes it easy to add
    // time intervals to a date.
    $current_time = new DateTime;

    // to get the DateTime for next week, just add 7 days
    $current_time->add(new Dateinterval('P7D'));

    // Get the numeric representation of the day of the week (0=sun, 6=sat)
    $current_day_of_week = intval(($current_time->format('w')));
    
    foreach($alarm_settings['node'] as $row) {
        $set_node = node_load($row->nid);
        // get the array for the time field of the alarm setting.
        $set_time_lang = field_language('node', $set_node, 'field_set_time');
        $set_time = $set_node->field_set_time[$set_time_lang][0];

        // Get the hour and minute of the alarm
        $hour = $set_time['value'] / 3600;
        $minute = ($set_time['value'] % 3600) / 60;
        
        // load the user into an object
        $user = user_load($set_node->uid); 

        // Get the days on which the alarm repeats 
        unset($repeats);
        $repeats = array();
        if($set_time['sun'] == '1') $repeats[] = 0;
        if($set_time['mon'] == '1') $repeats[] = 1;
        if($set_time['tue'] == '1') $repeats[] = 2;
        if($set_time['wed'] == '1') $repeats[] = 3;
        if($set_time['thu'] == '1') $repeats[] = 4;
        if($set_time['fri'] == '1') $repeats[] = 5;
        if($set_time['sat'] == '1') $repeats[] = 6;

        // Now add the alarm for next week corresponding to these days
        foreach($repeats as $repeat_day_of_week) {
            // Find the number of days between the repeat occurence and the
            // current day of the week
            $day_difference = $repeat_day_of_week - $current_day_of_week;

            // Adjust for the case where the repeat day of the week has already
            // passed in the current week
            if ($day_difference != 0) {
                continue;
            }
            
            // clone the datetime object.
            $repeat_date = clone $current_time;

            // Set the timezone
            $repeat_date->setTimezone(new DateTimeZone($user->timezone));

            // Set the time of the alarm
            $repeat_date->setTime($hour, $minute);

            // Convert to GMT by adding back the offset.
            $offset = $repeat_date->getOffset();
            if($offset >= 0) {
                $repeat_date->sub(new Dateinterval('PT' . $offset . 'S'));
            }
            else {
                $offset = -$offset;
                $repeat_date->add(new Dateinterval('PT' . $offset . 'S'));
            }
 
            // Get the string representing the date, in the format Drupal likes
            $time_string = $repeat_date->format('Y-m-d H:i:00');

            // Now create the actual alarm node
            $new_alarm = new stdClass();
            $new_alarm->type = 'alarm';
            node_object_prepare($new_alarm);
            
            // Add in all the relevant fields
            $new_alarm->field_occasion = $set_node->field_set_occasion;
            $new_alarm->field_question_subject = $set_node->field_set_subject;
            $new_alarm->field_question_difficulty = $set_node->field_set_difficulty;
            $new_alarm->field_time['und'][0] = array(
                'value' => $time_string,
                'timezone' => $user->timezone,
                'timezone_db' => 'UTC',
                'date_type' => 'datetime',
            );
            $new_alarm->field_sent['und'][0]['value'] = '0';
            $new_alarm->field_answered['und'][0]['value'] = '0';
            $new_alarm->name = $set_node->name;
            $new_alarm->uid = $set_node->uid;
            $new_alarm->language = $set_node->language;
            $new_alarm->status = '1';
            node_submit($new_alarm);
            node_save($new_alarm);
            $set_node->field_associated_alarms['und'][] = array(
                'target_id' => $new_alarm->nid
            );
        }//INNER FOREACH
        
        node_save($set_node);
    }//OUTER FOREACH
}//update_alarms

/*
 * delete_old_alarms(): clears out alarms answered greater than a week ago
 */
function delete_old_alarms() {
    // Get the current date and time as a DateTime object. This object tracks
    // all of the annoying stuff like time zones, and makes it easy to add
    // time intervals to a date.
    $current_time = new DateTime;

    // to get the DateTime for last week, just subtract 7 days
    $current_time->sub(new Dateinterval('P7D'));

    // Get all alarms sent earlier than 1 week ago.
    $alarm_query = new EntityFieldQuery;
    $alarms = $alarm_query
        ->entityCondition('entity_type', 'node', '=')
        ->entityCondition('bundle', 'alarm', '=')
        ->propertyCondition('status', NODE_PUBLISHED, '=')
        ->fieldCondition('field_time', 'value', 
                         $current_time->format('Y-m-d'), '<')
        ->execute();

    // Now delete all of these alarms
    if( isset($alarms['node'])) {
        node_delete_multiple(array_keys($alarms['node']));
    }
    
    return;
}
