<?php
/**
 * @file
 * A module that provides the ability to check received messages.
 */


/**
 * Implements hook_help.
 *
 * Displays help and module information.
 *
 * @param path
 *   Which path of the site we're using to display help
 * @param arg
 *   Array that holds the current path as returned from arg() function
 */
function receive_texts_help($path, $arg) {
  switch ($path) {
  case "admin/help#receive_texts":
    return '<p>'
         . t('Provides the ability to receive texts.') . '</p>';
    break;
  }
}


/**
 * Implements hook_twilio_sms_incoming()
 * is called when a user texts the system, responds with hello world.
 */
function receive_texts_twilio_sms_incoming($number, $message, $time, $options)  {

    // Get the user ID associated with the number.
    $msg_user_query = db_select('twilio_user', 'u')
    ->fields('u', array('uid'))
    ->condition('number', $number)
    ->execute();
    $msg_userId_array = $msg_user_query->fetchAssoc('uid');
    $uid = $msg_userId_array['uid'];

    // Get the user's alarm nodes.
    $alarm_query = new EntityFieldQuery;
    $alarms = $alarm_query
        ->entityCondition('entity_type', 'node', '=')
        ->entityCondition('bundle', 'alarm', '=')
        ->propertyCondition('status', NODE_PUBLISHED, '=')
        ->fieldCondition('field_sent', 'value', '1', '=')     // We only want sent alarms
        ->fieldCondition('field_answered', 'value', '0', '=') // We only want unanswered alarms
        ->propertyCondition('uid', $uid)           // We only want alarms from the texting user.
        ->execute();

    // handle the case where there are no alarms, by telling the user that he has
    // no alarms.
    if (!isset($alarms['node'])) {
        twilio_send($number, "You don't have any alarms sent! Set an alarm at morningbird.puzzledengsci.com/new_alarms");
        return;
    }
    
    watchdog('Receive Texts', print_r($alarms['node'], true));
    $alarm_nodes = node_load_multiple(array_keys($alarms['node']));

    // Sort alarms based on time of fire, earliest to latest.
    usort($alarm_nodes, 'receive_texts_alarms_compare');

    // Handle the case where the user has multiple outstanding alarms, by assuming
    // That the user is answering the least recent one.
    if (count($alarms['node']) > 1) {
        twilio_send($number, 'ERROR: Multiple outstanding alarms. Assuming you are answering the least recent one...');
    }

    // Otherwise they only have one alarm, as desired.
    $alarm = $alarm_nodes[0];

    // Get the time that the alarm was sent.
    $time_lang = field_language('node', $alarm, 'field_time');
    $time = $alarm->field_time[$time_lang][0]['value'];

    // Get the card that was sent.
    $card_sent_lang = field_language('node', $alarm, 'field_card_sent');
    $flashcard_id = $alarm->field_card_sent[$card_sent_lang][0]['target_id'];
    $flashcard = node_load($flashcard_id);

    // Check if the user was correct
    if (check_answer($flashcard, $message)) {
        $answered_lang = field_language('node', $alarm, 'field_answered');
        $alarm->field_answered[$answered_lang][0]['value'] = '1';
        node_save($alarm);
        twilio_send($number, 'Right answer! Good Morning, User X!');
    }

    // otherwise the user was wrong
     else {
        twilio_send($number, 'Wrong! Try again.');
    } 
}

/*
 * check_answer($flashcard, $message):
 * compares the message sent by the user to the set of answers from a flashcard.
 * returns true if there is a match, false otherwise.
 */
function check_answer($flashcard, $message) {
    // Get the answers to the flashcard.
    $answer_lang = field_language('node', $flashcard, 'field_answer');
    $answers = $flashcard->field_answer[$answer_lang];

    // Check each answer for a match, return true if one occurs.
    foreach($answers as $answer) {
        // Case-insensitive comparison of the answer.
        if (strcasecmp($answer['value'], $message)) {
            return true; 
        }
    } 

    // Otherwise return false
    return false;
}

/*
 * This is a helper comparison function that sorts alarms by the time they
 * should go off, from earliest to latest.
 */
function receive_texts_alarms_compare(stdClass $a, stdClass $b) {
  $time_lang_a = field_language('node', $a, 'field_time');
  $time_a = $a->field_time[$time_lang_a][0]['value'];
  $tstamp_a = strtotime($time_a);

  $time_lang_b = field_language('node', $b, 'field_time');
  $time_b = $b->field_time[$time_lang_b][0]['value'];
  $tstamp_b = strtotime($time_b);

  if ($tstamp_a < $tstamp_b) {
    return -1;
  }
  else if ($tstamp_a == $tstamp_b) {
    return 0;
  }
  else if ($tstamp_a > $tstamp_b) {
    return 1;
  }
  return 0;
}
